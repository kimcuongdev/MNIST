import streamlit as st
import numpy as np
from PIL import Image
from streamlit_drawable_canvas import st_canvas
import tensorflow as tf
import matplotlib.pyplot as plt
# Load model (v√≠ d·ª•: model Keras ƒë√£ train tr√™n MNIST)
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("mnist_model.keras")

model = load_model()

st.title("üñåÔ∏è MNIST Digit Recognizer Demo")
st.write("V·∫Ω m·ªôt ch·ªØ s·ªë (0 - 9) v√†o b·∫£ng b√™n d∆∞·ªõi r·ªìi nh·∫•n **D·ª± ƒëo√°n**")

# K√≠ch th∆∞·ªõc canvas
CANVAS_SIZE = 280

# B·∫£ng v·∫Ω
canvas_result = st_canvas(
    fill_color="#000000",  # M√†u t√¥ (ƒëen)
    stroke_width=15,       # ƒê·ªô d√†y n√©t
    stroke_color="#FFFFFF",# M√†u n√©t (tr·∫Øng)
    background_color="#000000", # N·ªÅn ƒëen
    height=CANVAS_SIZE,
    width=CANVAS_SIZE,
    drawing_mode="freedraw",
    key="canvas",
)

if st.button("D·ª± ƒëo√°n"):
    if canvas_result.image_data is not None:
        # L·∫•y ·∫£nh t·ª´ canvas
        img = canvas_result.image_data

        # Chuy·ªÉn sang PIL ƒë·ªÉ resize
        img = Image.fromarray((img[:, :, 0:3]).astype(np.uint8))  # B·ªè alpha
        img = img.convert("L")  # Chuy·ªÉn grayscale
        img = img.resize((28, 28), Image.LANCZOS)

        # Chu·∫©n h√≥a d·ªØ li·ªáu cho model
        img_array = np.array(img)
        img_array = img_array / 255.0
        img_array = img_array.reshape((1, 28 * 28))

        
        plt.imshow(img_array.squeeze(), cmap="gray")
        plt.show()

        # Suy lu·∫≠n
        prediction = model.predict(img_array)
        predicted_digit = np.argmax(prediction)

        st.write(f"**K·∫øt qu·∫£ d·ª± ƒëo√°n:** {predicted_digit}")
        st.bar_chart(prediction[0])
    else:
        st.warning("Vui l√≤ng v·∫Ω m·ªôt ch·ªØ s·ªë tr∆∞·ªõc!")
